"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const conversations_base_1 = __importDefault(require("../../../conversations_base"));
const chalk_1 = __importDefault(require("chalk"));
class ConversationShow extends conversations_base_1.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const args = this.parsedArgs;
            let response = yield this.getConversationById(args.conversationID);
            // fix:  undefined displays
            this.log(chalk_1.default.magenta.underline.bold("User ID:"), response.data.id);
            this.log('');
            this.log(chalk_1.default.magenta.underline.bold("Name:"), response.data.name, `(${response.data.display_name || ""})`);
            this.log('');
            this.log(chalk_1.default.magenta.underline.bold("Image Url:"), response.data.image_url || "None");
            this.log('');
            this.log(chalk_1.default.magenta.underline.bold("State:"), response.data.state);
            this.log('');
            this.log(chalk_1.default.magenta.underline.bold("Created:"), response.data.timestamp.created); // use moment here
            this.log('');
        });
    }
}
exports.default = ConversationShow;
ConversationShow.description = "Show conversation details";
ConversationShow.examples = [];
ConversationShow.args = [
    ...conversations_base_1.default.args,
    { name: 'conversationID', required: false }
];
