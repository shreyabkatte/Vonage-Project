"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JWT = void 0;
const jsonwebtoken_1 = require("jsonwebtoken");
const uuid_1 = require("uuid");
class JWT {
    tokenGenerate(applicationId, privateKey, opts) {
        if (!applicationId || !privateKey)
            throw new Error('Missing applicationId or privateKey');
        if (typeof applicationId !== 'string') {
            throw new Error('applicationId must be string');
        }
        if (typeof privateKey !== 'string' && !(privateKey instanceof Buffer)) {
            throw new Error('privateKey must be string or buffer');
        }
        let claims = this.validateOptions(opts);
        claims.application_id = applicationId;
        return jsonwebtoken_1.sign(claims, privateKey, {
            algorithm: 'RS256',
            header: { typ: 'JWT' },
        });
    }
    validateOptions(opts) {
        let now = parseInt((Date.now() / 1000).toString(), 10);
        let claims = {
            jti: (opts === null || opts === void 0 ? void 0 : opts.jti) || uuid_1.v4(),
            iat: (opts === null || opts === void 0 ? void 0 : opts.issued_at) || now,
            exp: now + ((opts === null || opts === void 0 ? void 0 : opts.ttl) || 900)
        };
        if (opts === null || opts === void 0 ? void 0 : opts.subject) {
            claims.sub = opts.subject;
        }
        if (opts === null || opts === void 0 ? void 0 : opts.acl) {
            claims.acl = opts.acl;
        }
        return claims;
    }
}
exports.JWT = JWT;
