"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const fs_2 = require("fs");
const path = __importStar(require("path"));
const shelljs_1 = __importDefault(require("shelljs"));
function isExists(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let result = yield fs_1.promises.access(path, fs_2.constants.F_OK);
            return true;
        }
        catch (error) {
            return false;
        }
    });
}
;
function writeFile(filePath, data) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const dirname = path.dirname(filePath);
            let exist = yield isExists(dirname);
            if (!exist) {
                yield shelljs_1.default.mkdir('-p', dirname);
            }
            exist = yield isExists(filePath);
            if (!exist) {
                (0, fs_2.writeFileSync)(filePath, JSON.stringify({ apiKey: '', apiSecret: '' }, null, 2), 'utf8');
            }
        }
        catch (err) {
            throw new Error(err);
        }
    });
}
const hook = function (options) {
    return __awaiter(this, void 0, void 0, function* () {
        let name = path.join(this.config.configDir, 'vonage.config.json');
        writeFile(name, '');
        return;
    });
};
exports.default = hook;
