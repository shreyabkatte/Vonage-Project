"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_utils_1 = __importDefault(require("@vonage/cli-utils"));
const command_1 = require("@oclif/command");
const lodash_1 = require("lodash");
class ConfigSet extends cli_utils_1.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const flags = this.globalFlags;
            //add start, stop process indicators
            this.saveConfig((0, lodash_1.merge)({}, this.userConfig, flags));
            this.log('Configuration saved.');
        });
    }
}
exports.default = ConfigSet;
ConfigSet.description = 'set Vonage CLI config';
ConfigSet.flags = Object.assign(Object.assign({}, cli_utils_1.default.flags), { 'apiKey': command_1.flags.string({
        description: 'Vonage API Key',
    }), 'apiSecret': command_1.flags.string({
        description: 'Vonage API Key',
    }) });
ConfigSet.args = [
    ...cli_utils_1.default.args,
];
