"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_utils_1 = __importDefault(require("@vonage/cli-utils"));
const command_1 = require("@oclif/command");
const fs_1 = require("fs");
class GenerateJWT extends cli_utils_1.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const flags = this.parsedFlags;
            let private_key = (0, fs_1.readFileSync)(flags.key_file.replace(/(\s+)/g, '\\$1'));
            let claims = {
                application_id: flags.app_id,
                sub: flags.subject,
                acl: JSON.parse(flags.acl),
                exp: flags.exp || Date.now() + 21600
            };
            let jwt = this.Vonage.generateJwt(private_key, claims);
            this.log(jwt);
            this.exit();
        });
    }
}
exports.default = GenerateJWT;
GenerateJWT.description = 'generate a Vonage JWT token';
GenerateJWT.examples = [
    `jwt --key_file='./testing.key' --app_id=31521081-e4c7-41fe-bccc-44af98879068`
];
GenerateJWT.flags = Object.assign(Object.assign({}, cli_utils_1.default.flags), { app_id: command_1.flags.string({
        required: true,
        description: "Application ID to authenticate with"
    }), key_file: command_1.flags.string({
        required: true,
        description: "Path to private key file location"
    }), subject: command_1.flags.string({
        required: false,
    }), acl: command_1.flags.string({
        required: false,
        description: `Read more about it in the ACL overview - https://developer.vonage.com/conversation/guides/jwt-acl#acls`,
        default: '{}'
    }), exp: command_1.flags.string({ required: false, description: "Expiration of created JWT - defaults to 24 hours." }) });
GenerateJWT.args = [
    ...cli_utils_1.default.args,
];
