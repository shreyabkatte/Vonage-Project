"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_utils_1 = __importDefault(require("@vonage/cli-utils"));
const chalk_1 = __importDefault(require("chalk"));
class AppCommand extends cli_utils_1.default {
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (((_a = error === null || error === void 0 ? void 0 : error.oclif) === null || _a === void 0 ? void 0 : _a.exit) === 0)
                return _super.catch.call(this, error);
            this.log(chalk_1.default.red.bold(((_b = error === null || error === void 0 ? void 0 : error.body) === null || _b === void 0 ? void 0 : _b.detail) || error));
            return _super.catch.call(this, error);
        });
    }
    get allApplications() {
        return new Promise((res, rej) => {
            this.vonage.applications.get({}, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            }, true);
        });
    }
    createApplication(data) {
        return new Promise((res, rej) => {
            this.vonage.applications.create(data, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            });
        });
    }
    getSingleApplication(appId) {
        return new Promise((res, rej) => {
            this.vonage.applications.get(appId, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            }, true);
        });
    }
    updateApplication(appObj) {
        return new Promise((res, rej) => {
            this.vonage.applications.update(appObj.id, appObj, (error, result) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(result);
                }
            });
        });
    }
    deleteApplication(appId) {
        return new Promise((res, rej) => {
            this.vonage.applications.delete(appId, (error, result) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(result);
                }
            });
        });
    }
    updateNumber(number, countryCode, appId) {
        return new Promise((res, rej) => {
            this.vonage.number.update(countryCode, number, {
                app_id: appId || null,
            }, (error, result) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(result);
                }
            });
        });
    }
    listNumbers(number) {
        return new Promise((res, rej) => {
            this.vonage.number.get({
                pattern: number || '',
                search_pattern: 1
            }, (error, result) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(result);
                }
            });
        });
    }
}
exports.default = AppCommand;
AppCommand.flags = Object.assign({}, cli_utils_1.default.flags);
AppCommand.args = [
    ...cli_utils_1.default.args,
    /* ... */
];
