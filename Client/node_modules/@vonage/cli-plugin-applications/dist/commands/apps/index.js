"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const app_base_1 = __importDefault(require("../../app_base"));
const cli_ux_1 = __importDefault(require("cli-ux"));
class ApplicationsList extends app_base_1.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const flags = this.parsedFlags;
            let appData = yield this.allApplications;
            let appList = appData['_embedded'].applications;
            cli_ux_1.default.table(appList, {
                name: {},
                id: {},
                capabilities: {
                    get: (row) => Object.keys(row['capabilities']).toString(),
                }
            }, Object.assign({}, flags));
            this.exit();
        });
    }
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.catch.call(this, error);
        });
    }
}
exports.default = ApplicationsList;
ApplicationsList.description = 'manage your Vonage applications';
ApplicationsList.examples = ['vonage apps', 'vonage apps --output=json'];
ApplicationsList.flags = Object.assign(Object.assign({}, app_base_1.default.flags), cli_ux_1.default.table.flags({
    except: ['columns', 'no-truncate', 'csv', 'extended', 'no-header']
}));
