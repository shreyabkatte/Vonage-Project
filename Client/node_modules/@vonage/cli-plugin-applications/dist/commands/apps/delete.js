"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const app_base_1 = __importDefault(require("../../app_base"));
const prompts_1 = require("prompts");
const chalk_1 = __importDefault(require("chalk"));
const cli_ux_1 = __importDefault(require("cli-ux"));
class ApplicationsDelete extends app_base_1.default {
    setQuestions(list) {
        return list.map((application) => {
            return {
                title: `${application.name} | ${application.id}`,
                value: application.id
            };
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const flags = this.parsedFlags;
            const args = this.parsedArgs;
            if (!args.appId) {
                let appData = yield this.allApplications;
                let appList = appData['_embedded'].applications;
                let response = yield prompts_1.prompt([
                    {
                        type: 'autocompleteMultiselect',
                        name: 'appId',
                        message: 'Your Applications',
                        choices: this.setQuestions(appList),
                        initial: 0,
                    },
                    {
                        type: 'confirm',
                        name: 'confirm',
                        message: `Confirm deletion?`,
                        initial: false
                    }
                ]);
                if (response.confirm) {
                    delete response.confirm;
                    let plural = response.appId.length > 1 ? 's' : '';
                    cli_ux_1.default.action.start(chalk_1.default.bold(`Deleting ${response.appId.length} Application${plural}`), 'Initializing', { stdout: true });
                    response.appId.map((v) => {
                        this.deleteApplication(v);
                        this.log(`Application ${v} deleted.`);
                    });
                    cli_ux_1.default.action.stop();
                }
                else {
                    this.log(chalk_1.default.bold('Delete cancelled.'));
                }
            }
            if (args.appId) {
                this.deleteApplication(args.appId);
                this.log(`Application ${args.appId} deleted.`);
            }
            this.exit();
        });
    }
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.catch.call(this, error);
        });
    }
}
exports.default = ApplicationsDelete;
ApplicationsDelete.description = 'delete a Vonage application';
ApplicationsDelete.flags = Object.assign({}, app_base_1.default.flags);
ApplicationsDelete.examples = [
    `vonage apps:delete 00000000-0000-0000-0000-000000000000`,
    `vonage apps:delete`
];
ApplicationsDelete.args = [
    { name: 'appId', required: false },
];
