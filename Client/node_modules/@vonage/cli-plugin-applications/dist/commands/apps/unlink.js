"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const app_base_1 = __importDefault(require("../../app_base"));
const parser_1 = require("@oclif/parser");
class ApplicationsUnlink extends app_base_1.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const flags = this.parsedFlags;
            if (!flags.number) {
                this.error(new Error('Flag \'number\' not provided.'));
            }
            // get the number details, or error if number doesn't exist
            let number = yield this.listNumbers(flags.number);
            // update the number with appid, lvn, country
            let response = yield this.updateNumber(flags.number, number.numbers[0].country);
            if (response['error-code'] === '200') {
                this.log(`Number '${flags.number}' has been unassigned.`);
                this.exit();
            }
        });
    }
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.catch.call(this, error);
        });
    }
}
exports.default = ApplicationsUnlink;
ApplicationsUnlink.description = 'unlink numbers from Vonage application';
ApplicationsUnlink.examples = [];
ApplicationsUnlink.flags = Object.assign(Object.assign({}, app_base_1.default.flags), { number: parser_1.flags.string({
        description: 'Owned number to be unassigned'
    }) });
