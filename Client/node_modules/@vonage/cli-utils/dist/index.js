"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const server_sdk_1 = __importDefault(require("@vonage/server-sdk"));
const fs_1 = require("fs");
const path = __importStar(require("path"));
class BaseCommand extends command_1.Command {
    get vonage() {
        if (this._vonage)
            return this._vonage;
        let credentials = {
            apiKey: this._apiKey || '',
            apiSecret: this._apiSecret || ''
        };
        this._vonage = new server_sdk_1.default(credentials, { appendToUserAgent: "vonage-cli" });
        return this._vonage;
    }
    get userConfig() {
        return this._userConfig;
    }
    saveConfig(newConfig) {
        (0, fs_1.writeFileSync)(path.join(this.config.configDir, 'vonage.config.json'), JSON.stringify(newConfig));
        return;
    }
    displayBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((res, rej) => {
                this.vonage.account.checkBalance((error, response) => {
                    if (error) {
                        rej(error);
                    }
                    else {
                        res(response);
                    }
                });
            });
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const { args, flags } = this.parse(this.constructor);
            this.globalFlags = { apiKey: flags.apiKey, apiSecret: flags.apiSecret, appId: flags.appId, keyFile: flags.keyFile, trace: flags.trace };
            this.parsedArgs = args;
            this.parsedFlags = flags;
            this.Vonage = server_sdk_1.default;
            //this removes the global flags from the command, so checking for interactive mode is possible.
            delete this.parsedFlags.apiKey;
            delete this.parsedFlags.apiSecret;
            delete this.parsedFlags.trace;
            let rawConfig = (0, fs_1.readFileSync)(path.join(this.config.configDir, 'vonage.config.json'));
            this._userConfig = JSON.parse(rawConfig.toString());
            let apiKey, apiSecret, appId, keyFile;
            // creds priority order -- flags > env > config
            // todo - need a better interface for this
            if ((flags === null || flags === void 0 ? void 0 : flags.apiKey) && (flags === null || flags === void 0 ? void 0 : flags.apiSecret)) {
                apiKey = flags.apiKey;
                apiSecret = flags.apiSecret;
            }
            else if (process.env.VONAGE_API_KEY && process.env.VONAGE_API_SECRET) {
                apiKey = process.env.VONAGE_API_KEY;
                apiSecret = process.env.VONAGE_API_SECRET;
            }
            else {
                apiKey = this._userConfig.apiKey;
                apiSecret = this._userConfig.apiSecret;
            }
            if ((flags === null || flags === void 0 ? void 0 : flags.appId) && (flags === null || flags === void 0 ? void 0 : flags.keyFile)) {
                appId = flags.appId;
                keyFile = flags.keyFile;
            }
            this._apiKey = apiKey;
            this._apiSecret = apiSecret;
            this._appId = appId;
            this._keyFile = keyFile;
        });
    }
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (((_a = error.oclif) === null || _a === void 0 ? void 0 : _a.exit) === 0)
                return;
            if ((_b = this.globalFlags) === null || _b === void 0 ? void 0 : _b.trace)
                this.log(error.stack);
            if (error.statusCode === 401) {
                this.error(new Error('Invalid Credentials'), {
                    code: 'API_AUTH_ERR',
                    suggestions: [
                        'Check your config credentials are correct - vonage config',
                    ]
                });
            }
            return _super.catch.call(this, error);
        });
    }
    finally(error) {
        const _super = Object.create(null, {
            finally: { get: () => super.finally }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.finally.call(this, error);
        });
    }
}
exports.default = BaseCommand;
// add global flags here
BaseCommand.args = [];
// add global flags here
BaseCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
    apiKey: command_1.flags.string({ hidden: true, dependsOn: ['apiSecret'] }),
    apiSecret: command_1.flags.string({ hidden: true, dependsOn: ['apiKey'] }),
    appId: command_1.flags.string({ hidden: true, dependsOn: ['keyFile'] }),
    keyFile: command_1.flags.string({ hidden: true, dependsOn: ['appId'] }),
    trace: command_1.flags.boolean({ hidden: true })
};
