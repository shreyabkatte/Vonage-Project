import { Command, flags } from '@oclif/command';
import { OutputArgs, OutputFlags } from '@oclif/parser';
interface UserConfig {
    apiKey: string;
    apiSecret: string;
}
export default abstract class BaseCommand extends Command {
    private _vonage;
    protected Vonage: any;
    protected _apiKey: any;
    protected _apiSecret: any;
    protected _appId: any;
    protected _keyFile: any;
    protected _userConfig: UserConfig;
    protected parsedArgs?: OutputArgs<any>;
    protected parsedFlags?: OutputFlags<typeof BaseCommand.flags>;
    protected globalFlags?: OutputFlags<any>;
    static args: any[];
    static flags: {
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        apiKey: flags.IOptionFlag<string>;
        apiSecret: flags.IOptionFlag<string>;
        appId: flags.IOptionFlag<string>;
        keyFile: flags.IOptionFlag<string>;
        trace: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    get vonage(): any;
    get userConfig(): UserConfig;
    saveConfig(newConfig: UserConfig): void;
    displayBalance(): Promise<any>;
    init(): Promise<void>;
    catch(error: any): Promise<any>;
    finally(error: any): Promise<any>;
}
export {};
