export declare class VetchError<T = any> extends Error {
    code?: string;
    response?: VetchResponse<T>;
    config: VetchOptions;
    constructor(message: string, options: VetchOptions, response: VetchResponse<T>);
}
export interface Headers {
    [index: string]: any;
}
export interface VetchHttpRequest {
    responseUrl: string;
}
export declare type VetchPromise<T = any> = Promise<VetchResponse<T>>;
export declare const VetchPromise: PromiseConstructor;
export interface VetchResponse<T = any> {
    config: VetchOptions;
    data: T;
    status: number;
    statusText: string;
    headers: Headers;
    request: VetchHttpRequest;
}
export interface VetchOptions {
    adapter?: <T = any>(options: VetchOptions, defaultAdapter: (options: VetchOptions) => VetchPromise<T>) => VetchPromise<T>;
    url?: string;
    baseUrl?: string;
    baseURL?: string;
    method?: 'GET' | 'HEAD' | 'POST' | 'DELETE' | 'PUT' | 'CONNECT' | 'OPTIONS' | 'TRACE' | 'PATCH';
    headers?: Headers;
    data?: any;
    body?: any;
    params?: any;
    responseType?: 'json';
    checkStatus?: (status: number) => boolean;
    size?: number;
}
export interface RetryConfig {
}
