"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const numberinsight_base_1 = __importDefault(require("../../numberinsight_base"));
const parser_1 = require("@oclif/parser");
const lodash_1 = require("lodash");
const prompts_1 = require("prompts");
const chalk_1 = __importDefault(require("chalk"));
const cli_ux_1 = __importDefault(require("cli-ux"));
function notBasic(level) {
    return level === 'standard' || level === 'advancedSync';
}
class NumberInsight extends numberinsight_base_1.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const flags = this.parsedFlags;
            const args = this.parsedArgs;
            if (notBasic(flags.level) && !flags.confirm) {
                let response = yield (0, prompts_1.prompt)([
                    {
                        type: 'confirm',
                        name: 'confirm',
                        message: `This operation will charge your account. Proceed?`,
                        initial: false
                    }
                ]);
                if (response.confirm === false) {
                    this.log('Cancelled Number Insights operation.');
                    this.exit();
                }
                ;
            }
            cli_ux_1.default.action.start(chalk_1.default.bold('Fetching Insights'));
            let insights = yield this.getInsights(args.number, flags.level);
            cli_ux_1.default.action.stop();
            if (insights.status !== 0) {
                this.log(insights.status_message);
                this.exit();
            }
            this.log(chalk_1.default.underline.bold.inverse(`Number Insights - ${(0, lodash_1.startCase)((0, lodash_1.toLower)(flags.level))}`));
            this.log();
            if (flags.level === 'advancedSync') {
                this.log(insights.lookup_outcome_message);
                this.log();
            }
            this.log(chalk_1.default.bold(`Number Formats`));
            this.log(`National: ${insights.national_format_number}`);
            this.log(`International: ${insights.international_format_number}`);
            this.log();
            this.log(chalk_1.default.bold(`Country Details`));
            this.log(`Country: ${insights.country_name}`);
            this.log(`Country Code: ${insights.country_code}`);
            this.log(`ISO 3 Code: ${insights.country_code_iso3}`);
            this.log(`Prefix: ${insights.country_prefix}`);
            if (notBasic(flags.level)) {
                this.log();
                this.log(chalk_1.default.bold(`Current Carrier`));
                this.log(`Name: ${insights.current_carrier.name}`);
                this.log(`Country: ${insights.current_carrier.country}`);
                this.log(`Network Type: ${insights.current_carrier.netowrk_type}`);
                this.log(`Network Code: ${insights.current_carrier.network_code}`);
                this.log();
                this.log(chalk_1.default.bold(`Original Carrier`));
                this.log(`Name: ${insights.original_carrier.name}`);
                this.log(`Country: ${insights.original_carrier.country}`);
                this.log(`Network Type: ${insights.original_carrier.netowrk_type}`);
                this.log(`Network Code: ${insights.original_carrier.network_code}`);
                this.log();
                this.log(chalk_1.default.bold(`Ported: ${insights.ported}`));
                this.log();
                this.log(chalk_1.default.bold(`Roaming Status: ${insights.roaming.status}`));
            }
            if (flags.level === 'advancedSync') {
                this.log();
                this.log(chalk_1.default.bold(`Valid Number: ${insights.valid_number}`));
                this.log();
                this.log(chalk_1.default.bold(`Reachable: ${insights.reachable}`));
            }
            if (notBasic(flags.level)) {
                this.log();
                this.log(chalk_1.default.bold('Account Balance'));
                this.log(`Request Cost: ${insights.request_price}`);
                this.log(`Remaining Balance: ${insights.remaining_balance}`);
            }
            this.exit();
        });
    }
}
exports.default = NumberInsight;
NumberInsight.description = 'get details about a phone number';
NumberInsight.examples = [
    `vonage numberinsight 15555555555`, `vonage numberinsight 15555555555 --level=advanced`
];
NumberInsight.flags = Object.assign(Object.assign({}, numberinsight_base_1.default.flags), { level: parser_1.flags.string({
        required: false,
        default: 'basic',
        parse: input => input === 'advanced' ? `advancedSync` : input,
        options: ['basic', 'standard', 'advanced']
    }), confirm: parser_1.flags.boolean({ char: 'y', required: false }) });
NumberInsight.args = [
    { name: 'number', required: true },
];
