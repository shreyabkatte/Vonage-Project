"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const number_base_1 = __importDefault(require("../../number_base"));
const command_1 = require("@oclif/command");
const cli_ux_1 = __importDefault(require("cli-ux"));
class NumberSearch extends number_base_1.default {
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const flags = this.parsedFlags;
            const args = this.parsedArgs;
            let resp = yield this.numberSearch(args.countryCode, flags);
            try {
                cli_ux_1.default.table(resp.numbers, {
                    country: {},
                    msisdn: {
                        header: "Number"
                    },
                    type: {},
                    cost: {},
                    features: {
                        get: (row) => row.features.join(',')
                    }
                }, Object.assign({}, flags));
            }
            catch (error) {
                this.error('No results found.');
            }
            this.exit();
        });
    }
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.catch.call(this, error);
        });
    }
}
exports.default = NumberSearch;
NumberSearch.description = 'search for available Vonage numbers';
NumberSearch.examples = [
    `vonage numbers:search US`,
    `vonage numbers:search US --startsWith=1555`,
    `vonage numbers:search US --features=VOICE,SMS --endsWith=1234`
];
NumberSearch.flags = Object.assign(Object.assign({}, number_base_1.default.flags), { 'type': command_1.flags.string({
        description: 'Filter by type of number, such as mobile or landline',
        options: ['landline', 'mobile-lvn', 'landline-toll-free']
    }), 'startsWith': command_1.flags.string({
        description: 'Search for numbers that start with certain numbers.',
        exclusive: ['endsWith', 'contains']
    }), 'endsWith': command_1.flags.string({
        description: '',
        exclusive: ['startsWith', 'contains']
    }), 'contains': command_1.flags.string({
        description: '',
        exclusive: ['endsWith', 'startsWith']
    }), 'features': command_1.flags.string({
        description: ''
    }) });
NumberSearch.args = [
    { name: 'countryCode', required: false }
];
