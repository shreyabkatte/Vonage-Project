"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_utils_1 = __importDefault(require("@vonage/cli-utils"));
class NumberCommand extends cli_utils_1.default {
    catch(error) {
        return __awaiter(this, void 0, void 0, function* () {
            this.error(error);
        });
    }
    _parseParams(params) {
        let searchResponse = {};
        if (params.startsWith) {
            searchResponse['pattern'] = params.startsWith;
            searchResponse['search_pattern'] = 0;
            delete params.startsWith;
        }
        if (params.endsWith) {
            searchResponse['pattern'] = params.endsWith;
            searchResponse['search_pattern'] = 2;
            delete params.endsWith;
        }
        if (params.contains) {
            searchResponse['pattern'] = params.contains;
            searchResponse['search_pattern'] = 0;
            delete params.contains;
        }
        return Object.assign({}, params, searchResponse);
    }
    getAllNumbers(params) {
        return new Promise((res, rej) => {
            this.vonage.number.get(params, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            }, true);
        });
    }
    numberBuy(params) {
        let { countryCode, number } = params;
        return new Promise((res, rej) => {
            this.vonage.number.buy(countryCode, number, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            });
        });
    }
    numberSearch(countryCode, options) {
        return new Promise((res, rej) => {
            this.vonage.number.search(countryCode, this._parseParams(options), (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            });
        });
    }
    numberUpdate(number, countryCode, options) {
        return new Promise((res, rej) => {
            this.vonage.number.update(countryCode, number, options, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            });
        });
    }
    numberCancel(params) {
        let { countryCode, number } = params;
        return new Promise((res, rej) => {
            this.vonage.number.cancel(countryCode, number, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            });
        });
    }
}
exports.default = NumberCommand;
NumberCommand.flags = Object.assign({}, cli_utils_1.default.flags);
NumberCommand.args = [
    ...cli_utils_1.default.args,
    /* ... */
];
