"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_utils_1 = __importDefault(require("@vonage/cli-utils"));
const jwt_1 = require("@vonage/jwt");
const vetch_1 = require("@vonage/vetch");
const fs_1 = require("fs");
const lodash_1 = require("lodash");
const types_1 = require("./types");
class UsersCommand extends cli_utils_1.default {
    constructor() {
        super(...arguments);
        this._baseurl = `https://api.nexmo.com/v0.3/users`;
        this._defaultHttpOptions = {
            "method": types_1.HTTPMethods.GET,
            "headers": {},
            'responseType': types_1.ResponseTypes.json
        };
    }
    _generateJWT() {
        return __awaiter(this, void 0, void 0, function* () {
            let app_details_raw = (0, fs_1.readFileSync)(`${process.cwd()}/vonage_app.json`);
            let app_details = (JSON.parse(app_details_raw.toString()));
            this._token = yield (0, jwt_1.tokenGenerate)(app_details.application_id, app_details.private_key);
            return;
        });
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.init.call(this);
            yield this._generateJWT();
            return;
        });
    }
    getAllUsers(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const opts = (0, lodash_1.merge)({}, this._defaultHttpOptions);
            opts['url'] = `${this._baseurl}`;
            opts['headers']['Authorization'] = `Bearer ${this._token}`;
            let response = yield (0, vetch_1.request)(opts);
            return response;
        });
    }
    getUserById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const opts = (0, lodash_1.merge)({}, this._defaultHttpOptions);
            opts['url'] = `${this._baseurl}/${id}`;
            opts['headers']['Authorization'] = `Bearer ${this._token}`;
            let response = yield (0, vetch_1.request)(opts);
            return response;
        });
    }
    createUser(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const opts = (0, lodash_1.merge)({}, this._defaultHttpOptions);
            opts['url'] = `${this._baseurl}`;
            opts['method'] = types_1.HTTPMethods.POST;
            opts['data'] = params;
            opts['headers']['Authorization'] = `Bearer ${this._token}`;
            let response = yield (0, vetch_1.request)(opts);
            return response;
        });
    }
    updateUser(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const opts = (0, lodash_1.merge)({}, this._defaultHttpOptions);
            opts['url'] = `${this._baseurl}/${params.userID}`;
            opts['method'] = types_1.HTTPMethods.PATCH;
            opts['data'] = params;
            opts['headers']['Authorization'] = `Bearer ${this._token}`;
            let response = yield (0, vetch_1.request)(opts);
            return response;
        });
    }
    deleteUser(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const opts = (0, lodash_1.merge)({}, this._defaultHttpOptions);
            opts['url'] = `${this._baseurl}/${id}`;
            opts['method'] = types_1.HTTPMethods.DELETE;
            opts['headers']['Authorization'] = `Bearer ${this._token}`;
            let response = yield (0, vetch_1.request)(opts);
            return response;
        });
    }
}
exports.default = UsersCommand;
UsersCommand.flags = Object.assign({}, cli_utils_1.default.flags);
UsersCommand.args = [
    ...cli_utils_1.default.args,
];
